#include <WiFi.h>
#include <NetworkClient.h>
#include <WebServer.h>
#include "arduino_secrets.h"
#include "control.h"
#include "login.h"
#include "webpage.h"

const char *ssid = SECRET_SSID;
const char *pass = SECRET_PASS;

String username;
String password;

WebServer server(80);

//Check if header is present and correct
int is_authentified() {
  Serial.println("Enter is_authentified");
  if (server.hasHeader("Cookie")) {
    Serial.print("Found cookie: ");
    String cookie = server.header("Cookie");
    Serial.println(cookie);
    if (cookie.indexOf("ESPSESSIONID=1") != -1) {
      Serial.println("Authentication Successful (admin)");
      return 1;
    }
  }
  Serial.println("Authentication Failed");
  return 0;
}

//logout
void handleLogout() {
  if (server.hasHeader("Cookie")) {
    Serial.print("Found cookie: ");
    String cookie = server.header("Cookie");
    Serial.println(cookie);
  }
  Serial.println("Disconnection");
  server.sendHeader("Location", "/webpage.html");
  server.sendHeader("Cache-Control", "no-cache");
  server.sendHeader("Set-Cookie", "ESPSESSIONID=0");
  server.send(301);
  return;
}

//login
void handleLogin() {
  String msg;
  if (server.hasHeader("Cookie")) {
    Serial.print("Found cookie: ");
    String cookie = server.header("Cookie");
    Serial.println(cookie);
  }
  if (server.hasArg("USERNAME") && server.hasArg("PASSWORD")) {
    if (server.arg("USERNAME") == username && server.arg("PASSWORD") == password) {
      server.sendHeader("Location", "/control.html");
      server.sendHeader("Cache-Control", "no-cache");
      server.sendHeader("Set-Cookie", "ESPSESSIONID=1");
      server.send(301);
      Serial.println("Log in Successful");
      return;
    }
    msg = "Wrong username/password! try again.";
    Serial.println("Log in Failed");
  }
  // redirect to login page
  server.sendHeader("Location", "/login.html");
  server.sendHeader("Cache-Control", "no-cache");
  server.sendHeader("Set-Cookie", "ESPSESSIONID=1");
  server.send(301);
}

void handleModes() {
  Serial.println("Have Modes");
}

void handlePlantType() {
  Serial.println("Have Plant Type");
}

void handleReset() {
  Serial.println("Have Reset");
}

void handleSetWaterings() {
  Serial.println("Have Watering set");
}

void handleManual() {
  Serial.println("Have Manual");
}

void handleSetCreds() {
  Serial.println("Have Set Creds");
}

void handleCredentials() {
  Serial.println("Have Check Creds");
  server.send(200, "text/plain", "true");
}

void handleVariables() {
  Serial.println("Have Check Creds");
  server.send(200, "text/plain", "1, 2, 3, 4");
}

// Control page can be accessed only if authentication is ok
void handleControl() {
  Serial.println("Enter handleControl");
  String header;
  if (!is_authentified()) { 
    server.sendHeader("Location", "/login.html");
    server.sendHeader("Cache-Control", "no-cache");
    server.send(301);
    return;
  }
  server.send(200, "text/html", control);
}

// Login Page
void handleServeLogin() {
  server.send(200, "text/html", login);
}

// Main Page
void handleRoot() {
  Serial.println("Enter handleRoot");
  server.send(200, "text/html", webpage);
}

// Error Page
void handleNotFound() {
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += (server.method() == HTTP_GET) ? "GET" : "POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";
  for (uint8_t i = 0; i < server.args(); i++) {
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }
  server.send(404, "text/plain", message);
}


void setup(void) {
  int counter = 0;
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, pass);
  Serial.println("");

  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    counter++;
    if(counter >= 60){ //after 30 seconds timeout - reset board
      ESP.restart();
    }
  }
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  server.on("/",                handleRoot);
  server.on("/webpage.html",    handleRoot);
  server.on("/login.html",      handleServeLogin);
  server.on("/control.html",    handleControl);
  server.on("/login",           handleLogin);
  server.on("/logout",          handleLogout);
  server.on("/modes",           handleModes);
  server.on("/plant_type",      handlePlantType);
  server.on("/reset",           handleReset);
  server.on("/setWaterings",    handleSetWaterings);
  server.on("/manual",          handleManual);
  server.on("/setUIDPASS",      handleSetCreds);
  server.on("/hasCredentials",  handleCredentials);
  server.on("/variables",       handleVariables);
  server.on("/inline", []() {
    server.send(200, "text/plain", "this works without need of authentication");
  });

  server.onNotFound(handleNotFound);
  //here the list of headers to be recorded
  const char *headerkeys[] = {"User-Agent", "Cookie"};
  size_t headerkeyssize = sizeof(headerkeys) / sizeof(char *);
  //ask server to track these headers
  server.collectHeaders(headerkeys, headerkeyssize);
  server.begin();
  Serial.println("HTTP server started");
}

void loop(void) {
  server.handleClient();
  delay(2);  //allow the cpu to switch to other tasks
}
